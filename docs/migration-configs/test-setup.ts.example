// Bun v1.2.17 Test Setup with happy-dom and React Testing Library
import { beforeAll, afterAll, beforeEach, afterEach, expect } from "bun:test";
import { GlobalRegistrator } from "@happy-dom/global-registrator";
import { cleanup } from '@testing-library/react';
import * as matchers from '@testing-library/jest-dom/matchers';

// Extend expect with Testing Library matchers (v1.2.17 recommended approach)
expect.extend(matchers);

// Register happy-dom globally for all tests
beforeAll(() => {
  GlobalRegistrator.register();
  
  // Configure happy-dom for React Testing Library (v1.2.17 optimized)
  Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: (query: string) => ({
      matches: false,
      media: query,
      onchange: null,
      addListener: () => {}, // deprecated
      removeListener: () => {}, // deprecated
      addEventListener: () => {},
      removeEventListener: () => {},
      dispatchEvent: () => false,
    }),
  });
  
  // Mock IntersectionObserver (improved for v1.2.17)
  global.IntersectionObserver = class IntersectionObserver {
    constructor(callback: IntersectionObserverCallback, options?: IntersectionObserverInit) {
      // Store callback for potential future use
    }
    observe() {}
    disconnect() {}
    unobserve() {}
  };
  
  // Mock ResizeObserver (improved for v1.2.17)
  global.ResizeObserver = class ResizeObserver {
    constructor(callback: ResizeObserverCallback) {
      // Store callback for potential future use
    }
    observe() {}
    disconnect() {}
    unobserve() {}
  };
  
  // Mock requestAnimationFrame/cancelAnimationFrame
  global.requestAnimationFrame = (callback: FrameRequestCallback) => {
    return setTimeout(callback, 16); // ~60fps
  };
  global.cancelAnimationFrame = (id: number) => {
    clearTimeout(id);
  };
});

// Clean up after all tests
afterAll(() => {
  GlobalRegistrator.unregister();
});

// Clean up between tests (v1.2.17 optimized)
beforeEach(() => {
  // Clear any timers before each test
  // Note: Bun v1.2.17 has improved timer management
});

afterEach(() => {
  // Clean up React Testing Library renders
  cleanup();
  
  // Clean up DOM
  document.body.innerHTML = '';
  
  // Note: Bun v1.2.17 has improved module isolation
  // Manual module reset is less necessary but can be done if needed
});

// Custom matchers for better test experience
expect.extend({
  toBeInTheDocument(received) {
    const pass = received !== null && document.body.contains(received);
    if (pass) {
      return {
        message: () => `expected element not to be in the document`,
        pass: true,
      };
    } else {
      return {
        message: () => `expected element to be in the document`,
        pass: false,
      };
    }
  },
});

// Mock framer-motion to avoid animation issues in tests
jest.mock("framer-motion", () => ({
  motion: {
    div: "div",
    span: "span",
    button: "button",
  },
  AnimatePresence: ({ children }) => children,
}));

// Mock i18next for internationalization
jest.mock("react-i18next", () => ({
  useTranslation: () => ({
    t: (key: string) => key,
    i18n: {
      changeLanguage: jest.fn(),
      language: "ja",
    },
  }),
  Trans: ({ children }) => children,
}));