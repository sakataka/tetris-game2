import { afterEach, beforeEach, describe, expect, it } from "bun:test";
import { createInitialGameState } from "../game/game";
import { useGameStore } from "./gameStore";

describe("gameStore", () => {
  beforeEach(() => {
    // Reset store to initial state before each test
    useGameStore.setState(createInitialGameState());
  });

  afterEach(() => {
    // Clean up after each test
    useGameStore.setState(createInitialGameState());
  });

  describe("initial state", () => {
    it("should initialize with correct initial state", () => {
      const state = useGameStore.getState();
      const initialState = createInitialGameState();

      expect(state.score).toBe(initialState.score);
      expect(state.lines).toBe(initialState.lines);
      expect(state.level).toBe(initialState.level);
      expect(state.isGameOver).toBe(initialState.isGameOver);
      expect(state.isPaused).toBe(initialState.isPaused);
      expect(state.currentPiece).toBeTruthy();
      expect(state.nextPiece).toBeTruthy();
    });
  });

  describe("game actions", () => {
    it("should move piece left", () => {
      const initialState = useGameStore.getState();
      const initialX = initialState.currentPiece?.position.x ?? 0;

      useGameStore.getState().moveLeft();
      const newState = useGameStore.getState();

      expect(newState.currentPiece?.position.x).toBe(initialX - 1);
    });

    it("should move piece right", () => {
      const initialState = useGameStore.getState();
      const initialX = initialState.currentPiece?.position.x ?? 0;

      useGameStore.getState().moveRight();
      const newState = useGameStore.getState();

      expect(newState.currentPiece?.position.x).toBe(initialX + 1);
    });

    it("should move piece down", () => {
      const initialState = useGameStore.getState();
      const initialY = initialState.currentPiece?.position.y ?? 0;

      useGameStore.getState().moveDown();
      const newState = useGameStore.getState();

      expect(newState.currentPiece?.position.y).toBe(initialY + 1);
    });

    it("should rotate piece", () => {
      const initialState = useGameStore.getState();
      const initialRotation = initialState.currentPiece?.rotation ?? 0;

      useGameStore.getState().rotate();
      const newState = useGameStore.getState();

      const expectedRotation = (initialRotation + 1) % 4;
      expect(newState.currentPiece?.rotation).toBe(expectedRotation);
    });

    it("should hard drop piece", () => {
      const initialState = useGameStore.getState();
      const initialY = initialState.currentPiece?.position.y ?? 0;

      useGameStore.getState().drop();
      const newState = useGameStore.getState();

      // After hard drop, piece should be at a lower position (higher Y value)
      // or a new piece should be spawned
      const finalY = newState.currentPiece?.position.y ?? 0;
      expect(finalY).toBeGreaterThanOrEqual(initialY);
    });

    it("should hold current piece", () => {
      const initialState = useGameStore.getState();
      const initialPiece = initialState.currentPiece?.type;
      const initialHeldPiece = initialState.heldPiece;

      useGameStore.getState().holdPiece();
      const newState = useGameStore.getState();

      // After holding, the held piece should be the initial current piece
      // (unless hold was not allowed due to game state)
      if (initialHeldPiece === null && newState.canHold) {
        expect(newState.heldPiece).toBe(initialPiece);
      }
    });
  });

  describe("game state management", () => {
    it("should toggle pause state", () => {
      const initialState = useGameStore.getState();
      const initialPauseState = initialState.isPaused;

      useGameStore.getState().togglePause();
      const newState = useGameStore.getState();

      expect(newState.isPaused).toBe(!initialPauseState);
    });

    it("should reset game to initial state", () => {
      // Make some changes to the game state
      useGameStore.getState().moveLeft();
      useGameStore.getState().togglePause();

      // Reset the game
      useGameStore.getState().resetGame();
      const newState = useGameStore.getState();

      const initialState = createInitialGameState();
      expect(newState.score).toBe(initialState.score);
      expect(newState.lines).toBe(initialState.lines);
      expect(newState.level).toBe(initialState.level);
      expect(newState.isGameOver).toBe(initialState.isGameOver);
      expect(newState.isPaused).toBe(initialState.isPaused);
    });

    it("should clear animation states when they exist", () => {
      // Manually set some animation states
      useGameStore.setState({
        placedPositions: [{ x: 0, y: 0 }],
        clearingLines: [0],
        boardBeforeClear: Array(20)
          .fill(0)
          .map(() => Array(10).fill(0)),
      });

      // Clear animation states
      useGameStore.getState().clearAnimationStates();
      const newState = useGameStore.getState();

      expect(newState.placedPositions).toEqual([]);
      expect(newState.clearingLines).toEqual([]);
      expect(newState.boardBeforeClear).toBeNull();
    });

    it("should not update state when clearing empty animation states", () => {
      // Animation states should already be empty
      useGameStore.getState().clearAnimationStates();
      const newState = useGameStore.getState();

      // State reference should be the same (no unnecessary update)
      expect(newState.placedPositions).toEqual([]);
      expect(newState.clearingLines).toEqual([]);
      expect(newState.boardBeforeClear).toBeNull();
    });
  });

  describe("game restrictions", () => {
    it("should not allow movement when game is paused", () => {
      // Pause the game
      useGameStore.getState().togglePause();

      const initialState = useGameStore.getState();
      const initialPosition = {
        x: initialState.currentPiece?.position.x ?? 0,
        y: initialState.currentPiece?.position.y ?? 0,
      };

      // Try to move when paused
      useGameStore.getState().moveLeft();
      useGameStore.getState().moveRight();
      useGameStore.getState().moveDown();

      const newState = useGameStore.getState();

      // Position should remain unchanged
      expect(newState.currentPiece?.position.x).toBe(initialPosition.x);
      expect(newState.currentPiece?.position.y).toBe(initialPosition.y);
    });

    it("should not allow movement when game is over", () => {
      // Set game over state
      useGameStore.setState({ isGameOver: true });

      const initialState = useGameStore.getState();
      const initialPosition = {
        x: initialState.currentPiece?.position.x ?? 0,
        y: initialState.currentPiece?.position.y ?? 0,
      };

      // Try to move when game is over
      useGameStore.getState().moveLeft();
      useGameStore.getState().moveRight();
      useGameStore.getState().moveDown();

      const newState = useGameStore.getState();

      // Position should remain unchanged
      expect(newState.currentPiece?.position.x).toBe(initialPosition.x);
      expect(newState.currentPiece?.position.y).toBe(initialPosition.y);
    });
  });

  describe("store integration", () => {
    it("should provide all required game actions", () => {
      const state = useGameStore.getState();

      // Check that all expected actions are available
      expect(typeof state.moveLeft).toBe("function");
      expect(typeof state.moveRight).toBe("function");
      expect(typeof state.moveDown).toBe("function");
      expect(typeof state.rotate).toBe("function");
      expect(typeof state.drop).toBe("function");
      expect(typeof state.holdPiece).toBe("function");
      expect(typeof state.togglePause).toBe("function");
      expect(typeof state.resetGame).toBe("function");
      expect(typeof state.clearAnimationStates).toBe("function");
    });

    it("should provide all required game state properties", () => {
      const state = useGameStore.getState();

      // Check that all expected state properties are available
      expect(typeof state.score).toBe("number");
      expect(typeof state.lines).toBe("number");
      expect(typeof state.level).toBe("number");
      expect(typeof state.isGameOver).toBe("boolean");
      expect(typeof state.isPaused).toBe("boolean");
      expect(Array.isArray(state.board)).toBe(true);
      expect(Array.isArray(state.placedPositions)).toBe(true);
      expect(Array.isArray(state.clearingLines)).toBe(true);
    });
  });
});
